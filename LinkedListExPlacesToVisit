import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        LinkedList<String> placesToVisit = new LinkedList<>();
        addInOrder(placesToVisit,"Sydney");
        addInOrder(placesToVisit,"Melbourne");
        addInOrder(placesToVisit,"Brisbane");
        addInOrder(placesToVisit,"Alice");
        addInOrder(placesToVisit,"Canada");
        addInOrder(placesToVisit,"Camberra");
        addInOrder(placesToVisit,"Darwin");
        addInOrder(placesToVisit,"Perth");
        addInOrder(placesToVisit,"Adelaide");
        printList(placesToVisit);
        addInOrder(placesToVisit,"Darwin");
        addInOrder(placesToVisit,"Maryland");
        printList(placesToVisit);
        visit(placesToVisit);
//        placesToVisit.add("Sydney");
//        placesToVisit.add("Melbourne");
//        placesToVisit.add("Brisbane");
//        placesToVisit.add("Camberra");
//        placesToVisit.add("Canada");
//        placesToVisit.add("Adelaide");
//        placesToVisit.add("Darwin");
//        placesToVisit.add("Perth");        
//        placesToVisit.add(1,"Alice Springs");
//        printList(placesToVisit);
//        placesToVisit.remove(4);
//        printList(placesToVisit);
    }
    private static void printList(LinkedList<String> linkedList){
        Iterator<String> i = linkedList.iterator();
        while(i.hasNext()){
            System.out.println("Now visiting "+i.next());
        }
        System.out.println("==========================");
    }
    private static boolean addInOrder(LinkedList<String> linkedList, String newCity){
        ListIterator<String> stringListIterator = linkedList.listIterator();
        while(stringListIterator.hasNext()){
            int comparsion=stringListIterator.next().compareTo(newCity);
            if (comparsion == 0){
                System.out.println(newCity + " already included as a destination");
                return false;
            } else if (comparsion>0){
                stringListIterator.previous();
                stringListIterator.add(newCity);
                return true;
            }else if (comparsion <0){

            }

        }
        stringListIterator.add(newCity);
        return true;
    }
    private static void visit(LinkedList cities){
        Scanner scanner = new Scanner(System.in);
        boolean quit = false;
        boolean goingForward = true;
        ListIterator<String>listIterator = cities.listIterator();
        if(cities.getFirst()==""){
            System.out.println("No cities in itenerary");
            return;
        }else {
            System.out.println("Now visiting "+listIterator.next());
            printmenu();
        }
        while(!quit){
            int action = scanner.nextInt();
            scanner.nextLine();
            switch (action){
                case 0:
                    System.out.println("Holiday (vacation) over");
                    quit = true;
                    break;
                case 1:
                    if(!goingForward){
                        if (listIterator.hasNext()){
                            listIterator.next();
                        }
                        goingForward = true;
                    }
                    if (listIterator.hasNext()){
                    System.out.println("Now visiting "+listIterator.next());
                    }else{
                        System.out.println("Reached the end of the list");
                        goingForward = false;
                    }
                    break;
                case 2:
                    if(goingForward){
                        if (listIterator.hasPrevious()){
                            listIterator.previous();
                        }
                        goingForward=false;
                    }
                    if (listIterator.hasPrevious()){
                        System.out.println("Now visiting "+listIterator.previous());
                    }else {
                        System.out.println("We are at the start of the list");
                        goingForward = true;
                    }
                    break;
                case 3:
                    printmenu();
                    break;
            }


        }
    }
    private static void printmenu(){
        System.out.println("Available options: \npress ");
        System.out.println("0 - to quit\n" +
                "1 - to go to next city\n" +
                "2 - to go to previous city\n" +
                "3 - to print menu options");

    }

}
