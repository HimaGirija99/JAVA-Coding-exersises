Maximum Square Matrix With All Zeros
Send Feedback
Given an NxM matrix that contains only 0s and 1s, find out the size of the maximum square sub-matrix with all 0s. You need to return the size of the square matrix with all 0s.
Input format :
The first line of the test case contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively.

Second-line onwards, the next 'N' lines or rows represent the ith row values.

Each of the ith rows constitutes column values separated by a single space (Either 0 or 1).
Output Format:
Print the size of maximum square sub-matrix.
 Constraints :
0 <= N <= 10^4
0 <= M <= 10^4

Time Limit: 1 sec
Sample Input 1:
3 3
1 1 0
1 1 1
1 1 1
Sample Output 1:
1
Sample Input 2:
4 4
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
Sample Output 2:
4

public class Solution {

	public static int findMaxSquareWithAllZeros(int[][] input){
		int ans = 1;			
		if(input.length<2) return 0;
		int dp[][] = new int [input.length][input[0].length];
		for(int i=dp.length-1;i>=0; i--){
			for(int j = dp[0].length-1;j>=0;j--){
				if(i==dp.length-1&& j == dp[0].length-1 || i==dp.length-1|| j == dp[0].length-1){
					if(input[i][j]==0){
						dp[i][j] = 1;
					}
					else{
						dp[i][j] = 0;
					}				
				}else{
					if(input[i][j]==0){						
						dp[i][j] = Math.min(dp[i+1][j+1], Math.min(dp[i+1][j],dp[i][j+1]))+ 1;						
					}
					else{
						dp[i][j] = 0;
					}
					if(dp[i][j]>ans){
						ans = dp[i][j];
					}
				}
			}
		}
		return ans;	
	}

	
}

public class Solution {

	public static int findMaxSquareWithAllZeros(int[][] input){
		int ans = 1;			
		if(input.length<2) return 0;
		int dp[][] = new int [input.length][input[0].length];
		for(int i=dp.length-1;i>=0; i--){
			for(int j = dp[0].length-1;j>=0;j--){
				if(i==dp.length-1&& j == dp[0].length-1 || i==dp.length-1|| j == dp[0].length-1){
					if(input[i][j]==0){
						dp[i][j] = 1;
					}
					else{
						dp[i][j] = 0;
					}				
				}else{
					if(input[i][j]==0){						
						dp[i][j] = Math.min(dp[i+1][j+1], Math.min(dp[i+1][j],dp[i][j+1]))+ 1;						
					}
					else{
						dp[i][j] = 0;
					}
					if(dp[i][j]>ans){
						ans = dp[i][j];
					}
				}
			}
		}
		return ans;	
	}

	
}
