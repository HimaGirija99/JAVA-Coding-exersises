BFS
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2
import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;


public class Solution {

	public static void main(String[] args) throws NumberFormatException, IOException {        
        Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();
		if(V==0) return;
		if(V!=0 && E==0){
			for(int i =0; i<V;i++){
				System.out.print(i+" ");
			}
		}
		else{
		
		int edges[][] = new int[V][V];
		      
        for(int i =0; i< E; i++){
            int fV = s.nextInt();
            int sC = s.nextInt();
            edges[fV][sC] = 1;   
            edges[sC][fV] =1;
        }
        BFSHelper(edges);
		}
		
	}	
	
	public static void BFS(int[][] adj, int fV, boolean [] visited){	
		if(adj.length==0) return;					
		Queue<Integer> pendingVertices = new LinkedList<>();	
		pendingVertices.add(fV);
		visited[fV]=true;
		while(!pendingVertices.isEmpty()){
			int currentVertex = pendingVertices.poll(); 
			System.out.print(currentVertex +" "); 
			for(int i = 0; i < adj.length; i++){ 
				if(adj[currentVertex][i] == 1 && !visited[i]){
					// i is unvisited neighbor of currentVertex 
					pendingVertices.add(i); 
					visited[i] = true;
				}
			}
		}
	}
	public static void BFSHelper(int[][] adj){	
		if(adj.length==0)return;	
    	boolean[] visited = new boolean[adj.length];    	
    	for (int i = 0; i < adj.length; i++) {
      		if (visited[i]==false) {
        		BFS(adj, i, visited);
      		}
    	}
    	 	
	}


}