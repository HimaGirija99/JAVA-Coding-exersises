isConnected?
Send Feedback
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.
Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;

public class Solution {

	public static void main(String[] args) throws NumberFormatException, IOException {
       
        Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int e = s.nextInt();
		if(n==0) {
			System.out.println("true"); 
		}
		else if(n==1) {
			System.out.println("true");
		}
		else if(e<n-1){
			System.out.println("false");
		}		
		else{
			int adjMatrix[][] = new int[n][n];
			for (int i = 0; i < e; i++) {
				int v1 = s.nextInt();
				int v2 = s.nextInt();
				adjMatrix[v1][v2] = 1;
				adjMatrix[v2][v1] = 1;
			}		
			boolean res = BFSHelper(adjMatrix);
			System.out.println(res);
		}

	}

	public static void BFS(int[][] adj, int fV, boolean[] visited) {
		if (adj.length == 0)
			return;
		Queue<Integer> pendingVertices = new LinkedList<>();
		pendingVertices.add(fV);
		visited[fV] = true;
		while (!pendingVertices.isEmpty()) {
			int currentVertex = pendingVertices.poll();			
			for (int i = 0; i < adj.length; i++) {
				if (adj[currentVertex][i] == 1 && !visited[i]) {
					// i is unvisited neighbor of currentVertex
					pendingVertices.add(i);
					visited[i] = true;
				}
			}
		}
	}

	public static boolean BFSHelper(int[][] adj) {
		if (adj.length == 0)
			return false;
		boolean[] visited = new boolean[adj.length];
		boolean isConnected = true;
		for (int i = 0; i < adj.length; i++) {
			if (visited[i] == false) {
				BFS(adj, i, visited);
				if (visited[i] == false) {
					isConnected = false;
					break;
				}
			}
		}		
		return isConnected;
	}

}
