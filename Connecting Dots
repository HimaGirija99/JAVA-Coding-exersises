Connecting Dots
Send Feedback
Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns of the board. 
Each of the following N lines contain M characters. Please note that characters are not space separated. Each character is an uppercase Latin letter.
Output Format :
Print true if there is a cycle in the board, else print false.
Constraints :
2 <= N <= 1000
2 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true
import java.util.*;

public class Solution {

    int solve(String[] board, int n, int m)
	{
			boolean [][]visited = new boolean[n][n];
		for(int i = 0; i < n; i++)
		{
			visited[i] = new boolean[m];
			for(int j = 0; j < m; j++)
				visited[i][j] = false;
		}
		
		for(int i = 0; i < n; i++)
		{
			for(int j = 0; j < m; j++)
			{
				boolean ans = is_cycle(board, i, j, i, j, n, m, visited, board[i].charAt(j), 0);
				if(ans == true)
					return 1;
			}
		}
		return 0;
	}
	boolean is_cycle(String [] board, int si, int sj, int ei, int ej, int n, int m, boolean [][]visited, char c, int len)
	{
		if(len >= 4 && si == ei && sj == ej)
			return true;
		
		if(ei < 0 || ei >= n || ej < 0 || ej >= m || visited[ei][ej] == true || board[ei].charAt(ej) != c)
			return false;
		
		visited[ei][ej] = true;
		
		boolean left = is_cycle(board, si, sj, ei, ej - 1, n, m, visited, c, len + 1);
		boolean right = is_cycle(board, si, sj, ei, ej + 1, n, m, visited, c, len + 1);
		boolean up = is_cycle(board, si, sj, ei - 1, ej, n, m, visited, c, len + 1);
		boolean down = is_cycle(board, si, sj, ei + 1, ej, n, m, visited, c, len + 1);
		
		if(left || right || up || down)
			return true;
		
		visited[ei][ej] = false;
		
		return false;
	}
	
	
}
